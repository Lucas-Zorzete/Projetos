{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mczre\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Projetos\\\\Snake Game\\\\my-snake-game\\\\src\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react'; // importando a biblioteca React do react\n// useState = componente importante para dar um estado (ação) para comportamentos\n\nimport './Board.css'; // importando o arquivo css\n\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  // => segmento da cobra (cabeça e cauda)\n  constructor(value) {\n    this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\n    // a CABEÇA vai ser adicionada\n    this.next = null; // ==> o último valor apontará para nada (tail) \n    // a CAUDA será removida\n  }\n}\n;\nclass LinkedList {\n  // => estrutura lógica da cobra (interligada com o segmento da cobra)\n  constructor(value) {\n    const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\n    this.head = node; // ==> primeiro nó da lista (cabeça) \n    this.tail = node; // ==> último nó da lista (cauda)\n  }\n}\n;\nconst Direction = {\n  // ==> guardando as direções existente pra cobra com TypeScript\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  LEFT: 'LEFT',\n  DOWN: 'DOWN'\n};\nconst board_size = 15; // ==> tamanho da borda do campo em 10x10 células\n\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(board_size)); // ==> guarda a matriz completa do jogo\n  const [snakeCells, setSnakesCells] = useState(new Set([44])); // => guarda CÉLULAS que a cobra nasce\n  const [snake, setSnake] = useState(new LinkedList(new Cell(4, 3, 44)));\n  // guarda a ESTRUTURA LÓGICA da cobra começando na célula 44\n  const [direction, setDirection] = useState(Direction.RIGHT); // ==> guarda as direções da cobra\n\n  useEffect(() => {\n    setInterval(() => {\n      moveSnake();\n    }, 150);\n    window.addEventListener('keydown', e => {\n      const newDirection = getDirectionFromKey(e.key);\n      const isValidDirection = newDirection !== ''; // ==> evite fazer nada se outra tecla for pressionada\n      if (isValidDirection) setDirection(newDirection); // => se pressionar corretamente, a cobra se move\n    });\n  }, []);\n  function moveSnake() {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col\n    };\n  }\n  ;\n  const getNextHeadCoords = (currentHeadCoords, direction) => {\n    if (direction === direction.UP) {\n      return {\n        row: currentHeadCoords.row - 1,\n        col: currentHeadCoords.col\n      };\n    }\n    if (direction === Direction.RIGHT) {\n      return {\n        row: currentHeadCoords.row,\n        col: currentHeadCoords.col + 1\n      };\n    }\n    if (direction === Direction.LEFT) {\n      return {\n        row: currentHeadCoords.row,\n        col: currentHeadCoords.col - 1\n      };\n    }\n    if (direction === Direction.DOWN) {\n      return {\n        row: currentHeadCoords.row + 1,\n        col: currentHeadCoords.col\n      };\n    }\n  };\n\n  // EXIBINDO O TABULEIRO NA PÁGINA (HTML)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => moveSnake(),\n      children: \"Mover manualmente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), board.map((row, rowIdx) =>\n    /*#__PURE__*/\n    // ==> índices para cada linha ou números das linhas\n    _jsxDEV(\"div\", {\n      className: \"row\",\n      children:\n      // key == detalhe técnico para React ir mais rápi\n      // do\n      row.map((cellValue, cellIdx) =>\n      /*#__PURE__*/\n      // ==> para cada célula, uma div (caixinha) é desenhada\n      _jsxDEV(\"div\", {\n        className: `cell ${snakeCells.has(cellValue) ? 'snake-cell' : ''\n        // SE a célula da cobra COM célula-valor -> ENTÃO ? -> SE NÃO :\n        }`,\n        children: cellValue\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n// ENUMERANDO E CRIANDO A MATRIZ (TABULEIRO)\n_s(Board, \"DAMUBwN4b8CyXh6jPlA9ZQtNIrE=\");\n_c = Board;\nconst createBoard = board_size => {\n  // ==> 10x10 células\n  let counter = 1; // ==> contador começa em 1\n  const board = []; // ==> o campo como lista/array\n\n  for (let row = 0; row < board_size; row++) {\n    // ==> for em JS (para cada linha/índice)\n    const currentRow = []; // ==> linha atual como lista/array\n    for (let col = 0; col < board_size; col++) {\n      // ==> o contador aumenta em 1 em 1\n      currentRow.push(counter++); // ==> adiciona o contador na lista da linha atual\n    }\n    board.push(currentRow); // ==> mostrar os números no campo em cada célula\n  }\n  return board;\n};\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  return '';\n};\nexport default Board; // exporta a sua função criada\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LinkedListNode","constructor","value","next","LinkedList","node","head","tail","Direction","UP","RIGHT","LEFT","DOWN","board_size","Board","_s","board","setBoard","createBoard","snakeCells","setSnakesCells","Set","snake","setSnake","Cell","direction","setDirection","setInterval","moveSnake","window","addEventListener","e","newDirection","getDirectionFromKey","key","isValidDirection","currentHeadCoords","row","col","getNextHeadCoords","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIdx","cellValue","cellIdx","has","_c","counter","currentRow","push","$RefreshReg$"],"sources":["C:/Users/mczre/OneDrive/Documentos/GitHub/Projetos/Snake Game/my-snake-game/src/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';  // importando a biblioteca React do react\r\n// useState = componente importante para dar um estado (ação) para comportamentos\r\n\r\nimport './Board.css';  // importando o arquivo css\r\n\r\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\r\nclass LinkedListNode {  // => segmento da cobra (cabeça e cauda)\r\n    constructor(value) {\r\n        this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\r\n                                // a CABEÇA vai ser adicionada\r\n        this.next = null;   // ==> o último valor apontará para nada (tail) \r\n                                // a CAUDA será removida\r\n    };\r\n};\r\n\r\nclass LinkedList {  // => estrutura lógica da cobra (interligada com o segmento da cobra)\r\n    constructor(value) {\r\n        const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\r\n        this.head = node;  // ==> primeiro nó da lista (cabeça) \r\n        this.tail = node;  // ==> último nó da lista (cauda)\r\n    };\r\n};\r\n\r\nconst Direction = { // ==> guardando as direções existente pra cobra com TypeScript\r\n    UP: 'UP',\r\n    RIGHT: 'RIGHT',\r\n    LEFT: 'LEFT',\r\n    DOWN: 'DOWN',\r\n};\r\n\r\nconst board_size = 15; // ==> tamanho da borda do campo em 10x10 células\r\n\r\nconst Board = () => {\r\n    const [board, setBoard] = useState(createBoard(board_size)); // ==> guarda a matriz completa do jogo\r\n    const [snakeCells, setSnakesCells] = useState(new Set([44])); // => guarda CÉLULAS que a cobra nasce\r\n    const [snake, setSnake] = useState(new LinkedList(new Cell(4, 3, 44)));\r\n                                // guarda a ESTRUTURA LÓGICA da cobra começando na célula 44\r\n    const [direction, setDirection] = useState(Direction.RIGHT); // ==> guarda as direções da cobra\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            moveSnake();\r\n        }, 150);\r\n\r\n        window.addEventListener('keydown', (e) => { \r\n            const newDirection = getDirectionFromKey(e.key);\r\n            const isValidDirection = newDirection !== '';  // ==> evite fazer nada se outra tecla for pressionada\r\n            if (isValidDirection) setDirection(newDirection);  // => se pressionar corretamente, a cobra se move\r\n        });\r\n    }, []);\r\n\r\n    function moveSnake() {\r\n        const currentHeadCoords = {\r\n            row: snake.head.value.row,\r\n            col: snake.head.value.col,\r\n        };\r\n\r\n        \r\n    };\r\n\r\n    const getNextHeadCoords = (currentHeadCoords, direction) => {\r\n        if (direction === direction.UP) {\r\n            return {\r\n                row: currentHeadCoords.row - 1,\r\n                col: currentHeadCoords.col,\r\n            };\r\n        }\r\n        if (direction === Direction.RIGHT) {\r\n            return {\r\n                row: currentHeadCoords.row,\r\n                col: currentHeadCoords.col + 1,\r\n            }\r\n        }\r\n        if (direction === Direction.LEFT) {\r\n            return {\r\n                row: currentHeadCoords.row,\r\n                col: currentHeadCoords.col - 1,\r\n            }\r\n        }\r\n        if (direction === Direction.DOWN) {\r\n            return {\r\n                row: currentHeadCoords.row + 1,\r\n                col: currentHeadCoords.col,\r\n            }\r\n        }\r\n    };\r\n\r\n    // EXIBINDO O TABULEIRO NA PÁGINA (HTML)\r\n    return (\r\n        <div className='board'>\r\n            <button onClick={() => moveSnake()}>Mover manualmente</button>\r\n            {board.map((row, rowIdx) => (  // ==> índices para cada linha ou números das linhas\r\n                <div key={rowIdx} className=\"row\">\r\n                {  // key == detalhe técnico para React ir mais rápi\r\n                // do\r\n                    row.map((cellValue, cellIdx) => ( // ==> para cada célula, uma div (caixinha) é desenhada\r\n                        <div \r\n                        key={cellIdx} \r\n                        className={`cell ${snakeCells.has(cellValue) ? 'snake-cell' : ''\r\n                                        // SE a célula da cobra COM célula-valor -> ENTÃO ? -> SE NÃO :\r\n                        }`}>{cellValue}</div>\r\n                    ))\r\n                }\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\n// ENUMERANDO E CRIANDO A MATRIZ (TABULEIRO)\r\nconst createBoard = board_size => {  // ==> 10x10 células\r\n    let counter = 1;  // ==> contador começa em 1\r\n    const board = []; // ==> o campo como lista/array\r\n  \r\n    for (let row = 0; row < board_size; row++) {  // ==> for em JS (para cada linha/índice)\r\n        const currentRow = []; // ==> linha atual como lista/array\r\n        for (let col = 0; col < board_size; col++) {  // ==> o contador aumenta em 1 em 1\r\n            currentRow.push(counter++);  // ==> adiciona o contador na lista da linha atual\r\n        }\r\n        board.push(currentRow); // ==> mostrar os números no campo em cada célula\r\n    }\r\n    return board;\r\n};\r\n\r\nconst getDirectionFromKey = key => {  \r\n    if (key === 'ArrowUp') return Direction.UP;\r\n    if (key === 'ArrowRight') return Direction.RIGHT;\r\n    if (key === 'ArrowLeft') return Direction.LEFT;\r\n    if (key === 'ArrowDown') return Direction.DOWN;\r\n    return '';\r\n};\r\n\r\nexport default Board; // exporta a sua função criada"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}