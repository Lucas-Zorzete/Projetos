{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mczre\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Projetos\\\\Snake Game\\\\my-snake-game\\\\src\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // importando a biblioteca React do react\n// useState = componente importante para dar um estado (ação) para comportamentos\n\nimport './Board.css'; // importando o arquivo css\n\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  // => lista de um único nó (elemento)\n  constructor(value) {\n    this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\n    // a CABEÇA vai ser adicionada\n    this.next = null; // ==> o último valor apontará para nada (tail) \n    // a CAUDA será 0RE\n  }\n}\n;\nclass SinglyLinkedList {\n  // => lista da estrutura completa (interligada com o comportamento da cobra)\n  constructor(value) {\n    const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\n    this.head = node; // ==> primeiro nó da lista (cabeça) \n    this.tail = node; // ==> último nó da lista (cauda)\n  }\n}\n;\nconst board_size = 10; // ==> tamanho da borda do campo em 10x10 células\n\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(board_size)); // ==> guarda a matriz completa do jogo\n  const [snakeCells, setSnakesCells] = useState(new Set([44])); // => guarda CÉLULA que a cobra nasce\n  const [snake, setSnake] = useState(new SinglyLinkedList([44]));\n  // COMPORTAMENTO da cobra começando na célula 44\n\n  // EXIBINDO O TABULEIRO NA PÁGINA (HTML)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIdx) =>\n    /*#__PURE__*/\n    // ==> índices para cada linha ou números das linhas\n    _jsxDEV(\"div\", {\n      className: \"row\",\n      children:\n      // key == detalhe técnico para React ir mais rápido\n      row.map((cellValue, cellIdx) =>\n      /*#__PURE__*/\n      // ==> para cada célula, uma div (caixinha) é desenhada\n      _jsxDEV(\"div\", {\n        className: `cell ${snakeCells.has(cellValue) ? 'snake-cell' : ''\n        // SE a célula da cobra COM célula-valor -> ENTÃO ? -> SE NÃO :\n        }`,\n        children: cellValue\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n// ENUMERANDO E CRIANDO A MATRIZ (TABULEIRO)\n_s(Board, \"7o28L6WUCtsTFuyamS5ifium6X8=\");\n_c = Board;\nconst createBoard = board_size => {\n  // ==> 10x10 células\n  let counter = 1; // ==> contador começa em 1\n  const board = []; // ==> o campo como lista/array\n\n  for (let row = 0; row < board_size; row++) {\n    // ==> for em JS (para cada linha/índice)\n    const currentRow = []; // ==> linha atual como lista/array\n    for (let col = 0; col < board_size; col++) {\n      // ==> o contador aumenta em 1 em 1\n      currentRow.push(counter++); // ==> adiciona o contador na lista da linha atual\n    }\n    board.push(currentRow); // ==> mostrar os números no campo em cada célula\n  }\n  return board;\n};\nexport default Board; // exporta a sua função criada\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LinkedListNode","constructor","value","next","SinglyLinkedList","node","head","tail","board_size","Board","_s","board","setBoard","createBoard","snakeCells","setSnakesCells","Set","snake","setSnake","className","children","map","row","rowIdx","cellValue","cellIdx","has","fileName","_jsxFileName","lineNumber","columnNumber","_c","counter","currentRow","col","push","$RefreshReg$"],"sources":["C:/Users/mczre/OneDrive/Documentos/GitHub/Projetos/Snake Game/my-snake-game/src/Board/Board.jsx"],"sourcesContent":["import React, { useState } from 'react';  // importando a biblioteca React do react\r\n// useState = componente importante para dar um estado (ação) para comportamentos\r\n\r\nimport './Board.css';  // importando o arquivo css\r\n\r\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\r\nclass LinkedListNode {  // => lista de um único nó (elemento)\r\n    constructor(value) {\r\n        this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\r\n                                // a CABEÇA vai ser adicionada\r\n        this.next = null;   // ==> o último valor apontará para nada (tail) \r\n                                // a CAUDA será 0RE\r\n    };\r\n};\r\n\r\nclass SinglyLinkedList {  // => lista da estrutura completa (interligada com o comportamento da cobra)\r\n    constructor(value) {\r\n        const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\r\n        this.head = node;  // ==> primeiro nó da lista (cabeça) \r\n        this.tail = node;  // ==> último nó da lista (cauda)\r\n    };\r\n};\r\n\r\nconst board_size = 10; // ==> tamanho da borda do campo em 10x10 células\r\n\r\nconst Board = () => {\r\n    const [board, setBoard] = useState(createBoard(board_size)); // ==> guarda a matriz completa do jogo\r\n    const [snakeCells, setSnakesCells] = useState(new Set([44])); // => guarda CÉLULA que a cobra nasce\r\n    const [snake, setSnake] = useState(new SinglyLinkedList([44]));\r\n                                // COMPORTAMENTO da cobra começando na célula 44\r\n\r\n    // EXIBINDO O TABULEIRO NA PÁGINA (HTML)\r\n    return (\r\n        <div className='board'>\r\n            {board.map((row, rowIdx) => (  // ==> índices para cada linha ou números das linhas\r\n                <div key={rowIdx} className=\"row\">\r\n                {  // key == detalhe técnico para React ir mais rápido\r\n                    row.map((cellValue, cellIdx) => ( // ==> para cada célula, uma div (caixinha) é desenhada\r\n                        <div \r\n                        key={cellIdx} \r\n                        className={`cell ${snakeCells.has(cellValue) ? 'snake-cell' : ''\r\n                                        // SE a célula da cobra COM célula-valor -> ENTÃO ? -> SE NÃO :\r\n                        }`}>{cellValue}</div>\r\n                    ))\r\n                }\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\n// ENUMERANDO E CRIANDO A MATRIZ (TABULEIRO)\r\nconst createBoard = board_size => {  // ==> 10x10 células\r\n    let counter = 1;  // ==> contador começa em 1\r\n    const board = []; // ==> o campo como lista/array\r\n  \r\n    for (let row = 0; row < board_size; row++) {  // ==> for em JS (para cada linha/índice)\r\n        const currentRow = []; // ==> linha atual como lista/array\r\n        for (let col = 0; col < board_size; col++) {  // ==> o contador aumenta em 1 em 1\r\n            currentRow.push(counter++);  // ==> adiciona o contador na lista da linha atual\r\n        }\r\n        board.push(currentRow); // ==> mostrar os números no campo em cada célula\r\n    }\r\n    return board;\r\n};\r\n\r\nexport default Board; // exporta a sua função criada"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAE;AAC1C;;AAEA,OAAO,aAAa,CAAC,CAAE;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,CAAC;EAAG;EACpBC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAC;IACI;IACxB,IAAI,CAACC,IAAI,GAAG,IAAI,CAAC,CAAG;IACI;EAC5B;AACJ;AAAC;AAED,MAAMC,gBAAgB,CAAC;EAAG;EACtBH,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMG,IAAI,GAAG,IAAIL,cAAc,CAACE,KAAK,CAAC,CAAC,CAAC;IACxC,IAAI,CAACI,IAAI,GAAGD,IAAI,CAAC,CAAE;IACnB,IAAI,CAACE,IAAI,GAAGF,IAAI,CAAC,CAAE;EACvB;AACJ;AAAC;AAED,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;AAEvB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACgB,WAAW,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACM,UAAU,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAImB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAIO,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClC;;EAE5B;EACA,oBACIL,OAAA;IAAKoB,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBT,KAAK,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,MAAM;IAAA;IAAQ;IAC3BxB,OAAA;MAAkBoB,SAAS,EAAC,KAAK;MAAAC,QAAA;MAC9B;MACCE,GAAG,CAACD,GAAG,CAAC,CAACG,SAAS,EAAEC,OAAO;MAAA;MAAO;MAC9B1B,OAAA;QAEAoB,SAAS,EAAE,QAAQL,UAAU,CAACY,GAAG,CAACF,SAAS,CAAC,GAAG,YAAY,GAAG;QAC9C;QAAA,EACb;QAAAJ,QAAA,EAAEI;MAAS,GAHTC,OAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGQ,CACvB;IAAC,GARIP,MAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUX,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;;AAED;AAAApB,EAAA,CA1BMD,KAAK;AAAAsB,EAAA,GAALtB,KAAK;AA2BX,MAAMI,WAAW,GAAGL,UAAU,IAAI;EAAG;EACjC,IAAIwB,OAAO,GAAG,CAAC,CAAC,CAAE;EAClB,MAAMrB,KAAK,GAAG,EAAE,CAAC,CAAC;;EAElB,KAAK,IAAIW,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGd,UAAU,EAAEc,GAAG,EAAE,EAAE;IAAG;IAC1C,MAAMW,UAAU,GAAG,EAAE,CAAC,CAAC;IACvB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG1B,UAAU,EAAE0B,GAAG,EAAE,EAAE;MAAG;MAC1CD,UAAU,CAACE,IAAI,CAACH,OAAO,EAAE,CAAC,CAAC,CAAE;IACjC;IACArB,KAAK,CAACwB,IAAI,CAACF,UAAU,CAAC,CAAC,CAAC;EAC5B;EACA,OAAOtB,KAAK;AAChB,CAAC;AAED,eAAeF,KAAK,CAAC,CAAC;AAAA,IAAAsB,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}