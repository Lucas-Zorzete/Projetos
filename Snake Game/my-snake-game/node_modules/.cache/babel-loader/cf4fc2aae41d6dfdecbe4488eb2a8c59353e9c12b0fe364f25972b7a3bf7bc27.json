{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mczre\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Projetos\\\\Snake Game\\\\my-snake-game\\\\src\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // importando a biblioteca React do react\n// useState = componente importante para dar um estado (ação) para comportamentos\n\nimport './Board.css'; // importando o arquivo css\n\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  // => lista de um único nó (elemento)\n  constructor(value) {\n    this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\n    this.next = null; // ==> o último valor apontará para nada (tail) \n    // a cauda não precisa de nenhum valor para apontar\n  }\n}\n;\nclass SinglyLinkedList {\n  // => lista da estrutura completa\n  constructor(value) {\n    const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\n    this.head = node; // ==> primeiro nó da lista (cabeça)\n    this.tail = node; // ==> último nó da lista (cauda)\n  }\n}\n;\nconst board_size = 10; // tamanho da borda do campo em 10x10 células\n\n// CRIANDO A MATRIZ\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState();\n\n  // CRIANDO O TABULEIRO\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIdx) =>\n    /*#__PURE__*/\n    // índices para cada linha ou números das linhas\n    _jsxDEV(\"div\", {\n      className: \"row\",\n      children:\n      // key == detalhe técnico para React ir mais rápido\n      row.map((cell, cellIdx) =>\n      /*#__PURE__*/\n      // ==> para cada célula, uma div (caixinha) é desenhada\n      _jsxDEV(\"div\", {\n        className: `cell ${false ? 'snake-cell' : ''}`\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this)\n      // fixo    // SE true -> ENTÃO ? -> SE NÃO :\n      )\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"2vjBDtdgfC/1yprHq/03FFUoiDU=\");\n_c = Board;\nexport default Board; // exporta a sua função criada\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LinkedListNode","constructor","value","next","SinglyLinkedList","node","head","tail","board_size","Board","_s","board","setBoard","className","children","map","row","rowIdx","cell","cellIdx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mczre/OneDrive/Documentos/GitHub/Projetos/Snake Game/my-snake-game/src/Board/Board.jsx"],"sourcesContent":["import React, { useState } from 'react';  // importando a biblioteca React do react\r\n// useState = componente importante para dar um estado (ação) para comportamentos\r\n\r\nimport './Board.css';  // importando o arquivo css\r\n\r\n// LISTAS ENCADEADAS - PARA O DIRECIONAMENTO DA COBRA\r\nclass LinkedListNode {  // => lista de um único nó (elemento)\r\n    constructor(value) {\r\n        this.value = value; // ==> o valor que eu definir vai ser guardado NESSE value\r\n        this.next = null;   // ==> o último valor apontará para nada (tail) \r\n                                // a cauda não precisa de nenhum valor para apontar\r\n    };\r\n};\r\n\r\nclass SinglyLinkedList {  // => lista da estrutura completa\r\n    constructor(value) {\r\n        const node = new LinkedListNode(value); // ==> valor do nó da primeira lista vai ser node\r\n        this.head = node;  // ==> primeiro nó da lista (cabeça)\r\n        this.tail = node;  // ==> último nó da lista (cauda)\r\n    };\r\n};\r\n\r\nconst board_size = 10; // tamanho da borda do campo em 10x10 células\r\n\r\n// CRIANDO A MATRIZ\r\nconst Board = () => {\r\n    const [board, setBoard] = useState();\r\n\r\n    // CRIANDO O TABULEIRO\r\n    return (\r\n        <div className='board'>\r\n            {board.map((row, rowIdx) => (  // índices para cada linha ou números das linhas\r\n                <div key={rowIdx} className=\"row\">\r\n                {  // key == detalhe técnico para React ir mais rápido\r\n                    row.map((cell, cellIdx) => ( // ==> para cada célula, uma div (caixinha) é desenhada\r\n                        <div key={cellIdx} className={`cell ${false ? 'snake-cell' : ''}`}></div>\r\n                                                    // fixo    // SE true -> ENTÃO ? -> SE NÃO :\r\n                    ))\r\n                }\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Board; // exporta a sua função criada"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAE;AAC1C;;AAEA,OAAO,aAAa,CAAC,CAAE;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,CAAC;EAAG;EACpBC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAC;IACpB,IAAI,CAACC,IAAI,GAAG,IAAI,CAAC,CAAG;IACI;EAC5B;AACJ;AAAC;AAED,MAAMC,gBAAgB,CAAC;EAAG;EACtBH,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMG,IAAI,GAAG,IAAIL,cAAc,CAACE,KAAK,CAAC,CAAC,CAAC;IACxC,IAAI,CAACI,IAAI,GAAGD,IAAI,CAAC,CAAE;IACnB,IAAI,CAACE,IAAI,GAAGF,IAAI,CAAC,CAAE;EACvB;AACJ;AAAC;AAED,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;AAEvB;AACA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC;;EAEpC;EACA,oBACIE,OAAA;IAAKc,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBH,KAAK,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,MAAM;IAAA;IAAQ;IAC3BlB,OAAA;MAAkBc,SAAS,EAAC,KAAK;MAAAC,QAAA;MAC9B;MACCE,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,OAAO;MAAA;MAAO;MACzBpB,OAAA;QAAmBc,SAAS,EAAE,QAAQ,KAAK,GAAG,YAAY,GAAG,EAAE;MAAG,GAAxDM,OAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuD;MAC5C;MAC/B;IAAC,GALIN,MAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOX,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACb,EAAA,CAlBID,KAAK;AAAAe,EAAA,GAALf,KAAK;AAoBX,eAAeA,KAAK,CAAC,CAAC;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}