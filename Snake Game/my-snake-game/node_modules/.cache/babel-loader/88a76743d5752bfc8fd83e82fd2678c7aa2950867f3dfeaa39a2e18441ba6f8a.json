{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mczre\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Projetos\\\\Snake Game\\\\my-snake-game\\\\src\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // importando a biblioteca React do react\n// useState = componente importante para dar um estado (ação) para comportamentos\n\nimport './Board.css'; // importando o arquivo css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {}\nconst board_size = 10; // tamanho da borda do campo em 10x10 células\n\n// CRIANDO A MATRIZ\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(\n  // variável de estado board e função setBoard \n  new Array(board_size).fill(0).map(row => new Array(board_size).fill(0))\n  // cria             fill == preenche os        map == lê todos os elementos ==> faz a grade 10x10 \n  //10 linhas                 elementos com 0  ==> célua vazia    \n  );\n\n  // CRIANDO O TABULEIRO\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIdx) =>\n    /*#__PURE__*/\n    // índices para cada linha ou números das linhas\n    _jsxDEV(\"div\", {\n      className: \"row\",\n      children:\n      // key == detalhe técnico para React ir mais rápido\n      row.map((cell, cellIdx) =>\n      /*#__PURE__*/\n      // ==> para cada célula, uma div (caixinha) é desenhada\n      _jsxDEV(\"div\", {\n        className: `cell ${false ? 'snake-cell' : ''}`\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this)\n      // fixo    // SE true -> ENTÃO ? -> SE NÃO :\n      )\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"RuR38PFjlKNA7d5U3dwwUCIIeEY=\");\n_c = Board;\nexport default Board; // exporta a sua função criada\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LinkedListNode","board_size","Board","_s","board","setBoard","Array","fill","map","row","className","children","rowIdx","cell","cellIdx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mczre/OneDrive/Documentos/GitHub/Projetos/Snake Game/my-snake-game/src/Board/Board.jsx"],"sourcesContent":["import React, { useState } from 'react';  // importando a biblioteca React do react\r\n// useState = componente importante para dar um estado (ação) para comportamentos\r\n\r\nimport './Board.css';  // importando o arquivo css\r\n\r\nclass LinkedListNode {\r\n    \r\n}\r\n\r\nconst board_size = 10; // tamanho da borda do campo em 10x10 células\r\n\r\n// CRIANDO A MATRIZ\r\nconst Board = () => {\r\n    const [board, setBoard] = useState(  // variável de estado board e função setBoard \r\n        new Array(board_size).fill(0).map(row => new Array(board_size).fill(0)),\r\n        // cria             fill == preenche os        map == lê todos os elementos ==> faz a grade 10x10 \r\n        //10 linhas                 elementos com 0  ==> célua vazia    \r\n    );\r\n\r\n    // CRIANDO O TABULEIRO\r\n    return (\r\n        <div className='board'>\r\n            {board.map((row, rowIdx) => (  // índices para cada linha ou números das linhas\r\n                <div key={rowIdx} className=\"row\">\r\n                {  // key == detalhe técnico para React ir mais rápido\r\n                    row.map((cell, cellIdx) => ( // ==> para cada célula, uma div (caixinha) é desenhada\r\n                        <div key={cellIdx} className={`cell ${false ? 'snake-cell' : ''}`}></div>\r\n                                                    // fixo    // SE true -> ENTÃO ? -> SE NÃO :\r\n                    ))\r\n                }\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Board; // exporta a sua função criada"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAE;AAC1C;;AAEA,OAAO,aAAa,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,cAAc,CAAC;AAIrB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;AAEvB;AACA,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ;EAAG;EACjC,IAAIS,KAAK,CAACL,UAAU,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,IAAI,IAAIH,KAAK,CAACL,UAAU,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EACtE;EACA;EACJ,CAAC;;EAED;EACA,oBACIR,OAAA;IAAKW,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBP,KAAK,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEG,MAAM;IAAA;IAAQ;IAC3Bb,OAAA;MAAkBW,SAAS,EAAC,KAAK;MAAAC,QAAA;MAC9B;MACCF,GAAG,CAACD,GAAG,CAAC,CAACK,IAAI,EAAEC,OAAO;MAAA;MAAO;MACzBf,OAAA;QAAmBW,SAAS,EAAE,QAAQ,KAAK,GAAG,YAAY,GAAG,EAAE;MAAG,GAAxDI,OAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuD;MAC5C;MAC/B;IAAC,GALIN,MAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOX,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACf,EAAA,CAtBID,KAAK;AAAAiB,EAAA,GAALjB,KAAK;AAwBX,eAAeA,KAAK,CAAC,CAAC;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}